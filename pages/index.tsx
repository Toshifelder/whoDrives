import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState, useEffect, useRef } from 'react'
import { Loader } from '@googlemaps/js-api-loader'
import GoogleMap from '../components/Map'
import LocationInputField from '../components/LocationInputField'

const Home: NextPage = () => {
  const [googleMapsApiLoaded, setGoogleMapsApiLoaded] = useState<boolean>(false);
  // const googlemap = useRef(null);
  // let map: google.maps.Map;

  useEffect(() => {
    (async () => {
      const loader = new Loader({
        apiKey: '',
        // apiKey: process.env.NEXT_PUBLIC_API_KEY as string,
        version: 'weekly',
        region: 'JP',
        language: 'ja',
        libraries: ['places']
      });
      // let initPos = { lat: 38.2597203, lng: 140.8799705 };
      // if (navigator.geolocation) {
      //   navigator.geolocation.getCurrentPosition(position => {
      //     initPos = { lat: position.coords.latitude, lng: position.coords.longitude }
      //   })
      // }
      await loader.load();
      setGoogleMapsApiLoaded(true);

      // map = new google.maps.Map(googlemap.current, {
      //   center: initPos,
      //   zoom: 12,
      // });

      // initAutocomplete(map);
    })();
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <>
        {/* <input
          id="pac-input"
          className="controls"
          type="text"
          placeholder="Search Box"
        /> */}
        {/* <div id="map" ref={googlemap} /> */}
        {googleMapsApiLoaded && (
          <>
            <GoogleMap></GoogleMap>
            <LocationInputField></LocationInputField>
          </>
        )}

        {/* <GoogleMapsContext.Provider
          value={{
            googleMap: map
          }}
          >
          <PlaceSearchBox></PlaceSearchBox>
        </GoogleMapsContext.Provider> */}
      </>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <h1>
            Who Drives{" "}
            <span role="img" aria-label="car">
              ðŸš™
            </span>
          </h1>
        </a>
      </footer>
    </>
  )
}

export default Home

// function initAutocomplete(map: google.maps.Map) {
//   // Create the search box and link it to the UI element.
//   const input = document.getElementById("pac-input");
//   const searchBox = new google.maps.places.SearchBox(input);

//   map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);
//   // Bias the SearchBox results towards current map's viewport.
//   map.addListener("bounds_changed", () => {
//     searchBox.setBounds(map.getBounds());
//   });

//   let markers: google.maps.Maker[] = [];

//   // Listen for the event fired when the user selects a prediction and retrieve
//   // more details for that place.
//   searchBox.addListener("places_changed", () => {
//     const places = searchBox.getPlaces();

//     if (places.length == 0) {
//       return;
//     }

//     // Clear out the old markers.
//     markers.forEach((marker) => {
//       marker.setMap(null);
//     });
//     markers = [];

//     // For each place, get the icon, name and location.
//     const bounds = new google.maps.LatLngBounds();

//     places.forEach((place) => {
//       if (!place.geometry || !place.geometry.location) {
//         console.log("Returned place contains no geometry");
//         return;
//       }

//       const icon = {
//         url: place.icon,
//         size: new google.maps.Size(71, 71),
//         origin: new google.maps.Point(0, 0),
//         anchor: new google.maps.Point(17, 34),
//         scaledSize: new google.maps.Size(25, 25),
//       };

//       // Create a marker for each place.
//       markers.push(
//         new google.maps.Marker({
//           map,
//           icon,
//           title: place.name,
//           position: place.geometry.location,
//         })
//       );
//       if (place.geometry.viewport) {
//         // Only geocodes have viewport.
//         bounds.union(place.geometry.viewport);
//       } else {
//         bounds.extend(place.geometry.location);
//       }
//     });
//     map.fitBounds(bounds);
//   });
// }